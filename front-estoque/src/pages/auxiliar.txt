import {React, useState, useEffect} from 'react'
import ApiUpdated from './ApiRetriver'
import GetCategoriesApi from './ImportCategoriesCreate'
import "../../app.css"

function Form_product({selectedId, onClearId}) {

  const [ValidationId, setValidationId] = useState(false)
  console.log(ValidationId)
  const [Product, setProduct] = useState([])
  const [ProductApi, setProductApi] = useState([])
  const [Categorys, setCategorys] = useState([])

  /* -=-=-=-=-=-=- SHOW CATEGORIES -=-=-=-=-=-=-*/
  useEffect(() => {
    if(!ValidationId){
      const ApiCategories = async () => {
        try{
          const response = await GetCategoriesApi.GetCategories()
          setCategorys(response.categories)
        }catch(error){
          console.log(error)
        }
      }

      ApiCategories()
    }
  }, [ValidationId])
  /* -=-=-=-=-=-=- SHOW CATEGORIES -=-=-=-=-=-=-*/





  /* -=-=-=-=-=-=- CREATE -=-=-=-=-=-=-*/
  const [FormCreate, setFormCreate] = useState({
    'name': '',
    'price': 0,
    'promotion': false,
    'price_promotion': 0,
    'stock_quantity': 0,
    'category': 0
  })

  const handleSubmitCreate = async (event) => {
    try{
      event.preventDefault()
      console.log(FormCreate)
    }catch(error){
      console.log(error)
    }

  }



/* -=-=-=-=-=-=- CREATE -=-=-=-=-=-=-*/



  /* -=-=-=-=-=-=- UPDATE -=-=-=-=-=-=-*/
  useEffect(() => {
    const RetriverApi = async (pk) => {
      if(pk !== null && Number.isInteger(pk) && pk !== undefined){
        const response = await ApiUpdated.Retriver(pk)
        if(response.status === 200){
          setProduct(response.data.product)
          setProductApi(response.data.product)
          setCategorys(response.data.categorys)
          setValidationId(true)
        }else{
          setValidationId(false)
        }
      }
    }
  
    RetriverApi(selectedId)
  }, [selectedId])
  
  const handleSubmitUpdated = async (event) => {
    try{
      event.preventDefault()
      const response = await ApiUpdated.ApiPutAndPatchUpdated(ProductApi, Product)
      if(response.error){
        if(response.error.name){
          alert('O nome do produto não pode ter mais de 75 caracteres.')
          return;
        }
        if(response.error.non_field_errors){
          alert(response.error.non_field_errors[0])
          return;
        }
      }

      onClearId()
      alert(response.data.message) 
      setValidationId(false)
    }catch(error){
      console.log(error)
    }
  }
  /* -=-=-=-=-=-=- UPDATE -=-=-=-=-=-=-*/





  return (
    <>
      {ValidationId === false ? (
        <>
          <form className="form_update" onSubmit={handleSubmitCreate}>
            <div className="div_form_update_contein_1">
              <input
              type="text"
              name="name"
              placeholder='Nome do produto'
              onChange={(e) => setFormCreate({...FormCreate, name: e.target.value})}/>

              <input
              type="number"
              name="price"
              placeholder='Preço do produto: R$'
              onChange={(e) => setFormCreate({...FormCreate, price: Number.parseFloat(e.target.value)})}/>

              <label htmlFor=""> 
              Produto em Promoção?
                <input
                type="checkbox"
                name="promotion"
                onChange={(e) => setFormCreate({...FormCreate, promotion: e.target.checked})}
                id="promotion"
                />
                
              </label>
            </div>

            <div className="div_form_update_contein_2">
              <input 
              type="number" 
              name="price_promotion"
              placeholder='Preço do produto em promoção: R$'
              onChange={(e) => setFormCreate({...FormCreate, price_promotion: Number.parseFloat(e.target.value)})}/>

              <input 
              type="number" 
              name="quantity"
              placeholder='Quantidade em estoque'
              onChange={(e) => setFormCreate({...FormCreate, stock_quantity: Number.parseFloat(e.target.value)})}/>

              <label htmlFor="">
                Categoria?
                <select 
                onChange={(e) => setFormCreate({...FormCreate, category: Number.parseFloat(e.target.value)})}
                >
                  {Categorys.map(category => (
                    <option key={category.id} value={category.id}>{category.name}</option>
                  ))} 
                </select>
              </label>
            </div>
            
            <div className="div_form_update_contein_buttons">
              <button type='submit'>Cadastrar</button>
            </div>
          </form>
        </>
      ):(
        <>
          <form className="form_update" onSubmit={handleSubmitUpdated}>
            <div className="div_form_update_contein_1">
              <input
              type="text"
              name="name"
              value={Product.name}
              onChange={(e) => setProduct({...Product, name: e.target.value})}/>

              <input
              type="number"
              name="price"
              value={Product.price}
              onChange={(e) => setProduct({...Product, price: Number.parseFloat(e.target.value)})}/>

              <label htmlFor=""> 
              Produto em Promoção?
                <input
                type="checkbox"
                name="promotion"
                checked={Product.promotion}
                onChange={(e) => setProduct({...Product, promotion: e.target.checked})}
                id="promotion"
                />
                
              </label>
            </div>

            <div className="div_form_update_contein_2">
              <input 
              type="number" 
              name="price_promotion"
              value={Product.price_promotion}
              onChange={(e) => setProduct({...Product, price_promotion: Number.parseFloat(e.target.value)})}/>

              <input 
              type="number" 
              name="quantity"
              value={Product.stock_quantity}
              onChange={(e) => setProduct({...Product, stock_quantity: Number.parseFloat(e.target.value)})}/>

              <label htmlFor="">
                Categoria?
                <select 
                value={Product.category}
                onChange={(e) => setProduct({...Product, category: Number.parseFloat(e.target.value)})}
                >
                  {Categorys.map(category => (
                    <option key={category.id} value={category.id}>{category.name}</option>
                  ))} 
                </select>
              </label>
            </div>
            
            <div className="div_form_update_contein_buttons">
              <button type="submit">Atualizar</button>
              <button onClick={() => setValidationId(false)}>Cadastrar</button>
            </div>
          </form>
        </>
      )}
    </>
  )
}

export default Form_product